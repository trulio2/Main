[
    {
        "name": "Single Responsibility Principle (SRP)",
        "definition": "A class should have one, and only one, reason to change. This means that a class should only have one job or responsibility."
    },
    {
        "name": "Open/Closed Principle (OCP)",
        "definition": "Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification. This means that the behavior of a module can be extended without modifying its source code."
    },
    {
        "name": "Liskov Substitution Principle (LSP)",
        "definition": "Objects of a superclass should be able to be replaced with objects of a subclass without affecting the correctness of the program. In other words, derived classes must be substitutable for their base classes."
    },
    {
        "name": "Interface Segregation Principle (ISP)",
        "definition": "No client should be forced to depend on interfaces it does not use. This means that a class shouldn't be forced to implement interfaces it doesn't use. Instead of one fat interface many small, specific interfaces are preferred."
    },
    {
        "name": "Dependency Inversion Principle (DIP)",
        "definition": "High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g., interfaces). Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions."
    }
]